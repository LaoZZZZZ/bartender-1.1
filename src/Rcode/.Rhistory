main = "False positive barcodes")
summary(false_positive$time_point_1)
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(false_negative$V2, col = 'green', xlab = 'Size of barcodes in log10 scale',
main = "False negative barcodes")
summary(false_negative$V2)
cluster <- read.table("/Users/lukez/Documents/barcode_single_end/simulation_data/simulated_data_cluster_cluster.csv",
header = TRUE, sep = ',', stringsAsFactors = F)
dim(truth)
dim(cluster)
combined = list()
truth = truth[which(truth$V2 > 3),]
result_cluster = cluster[which(cluster$time_point_1 > 3),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Size of barcodes in log10 scale',
main = "False positive barcodes")
summary(false_positive$time_point_1)
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(false_negative$V2, col = 'green', xlab = 'Size of barcodes in log10 scale',
main = "False negative barcodes")
summary(false_negative$V2)
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(missing$V2, col = 'green', xlab = 'Size of barcodes in log10 scale',
main = "False negative barcodes")
summary(missing$V2)
11696694/12422441
merged = merge(truth, result_cluster, by.x = "V1", by.y = "Center")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Estimated frequency")
abline(0, 1,col = 'red')
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Size of barcodes in log10 scale',
main = "False positive barcodes")
summary(false_positive$time_point_1)
dim(false_positive)
library(entropy)
entropy(c(0.2, 0.8), unit = "log2")
entropy(c(0.1, 0.9), unit = "log2")
? merge
named(merged)
merged = merge(truth, result_cluster, by.x = "V1", by.y = "Center")
name(merged)
names(merged)
? merge
entropy(c(0.33, 0.67), unit = "log2")
? mean
6.25 * .1 *.9/.097**2
6.25 * .1 *.9/.09**2
6.25 * .003 *.997/.097**2
16 * .003 *.997/.097**2
16 * .01 *.99/.09**2
16 * .005 *.995/.095**2
(0.01 - 0.05)/sqrt(2*0.01 * 0.99/6000)
(0.01 - 0.05)/sqrt(2*0.01 * 0.99/600)
(0.02 - 0.05)/sqrt(2*0.01 * 0.99/600)
(0.02 - 0.05)/sqrt(2*0.02 * 0.98/600)
(0.01 - 0.05)/sqrt(0.05 * 0.95 /600 + 0.01 * 0.99/600)
(0.01 - 0.05)/sqrt(0.05 * 0.95 /340 + 0.01 * 0.99/340)
(0.01 - 1/20)/sqrt(0.01 * 0.99/3000 + 0.05 * 0.95/3000)
(0.01 - 1/20)/sqrt(0.01 * 0.99/6000 + 0.05 * 0.95/6000)
(0.05 - 1/20)/sqrt(0.01 * 0.99/6000 + 0.05 * 0.95/6000)
(0.04 - 1/20)/sqrt(0.01 * 0.99/6000 + 0.05 * 0.95/6000)
(0.01 - 1/20)/sqrt(0.01 * 0.99/60 + 0.05 * 0.95/60)
(0.005 - 1/20)/sqrt(0.01 * 0.99/60 + 0.05 * 0.95/60)
(0 - 1/20)/sqrt(0.01 * 0.99/60 + 0.05 * 0.95/60)
(0.003 - 1/20)/sqrt(0.003 * 0.997/400 + 0.05 * 0.95/200)
(0.00 - 1/20)/sqrt(0.003 * 0.997/400 + 0.05 * 0.95/200)
(0.003 - 2/20)/sqrt(0.003 * 0.997/400 + 0.1 * 0.9/200)
(0.00 - 2/20)/sqrt(0.003 * 0.997/400 + 0.1 * 0.9/200)
(0.00 - 2/20)/sqrt(0.1 * 0.9/200)
(0.003 - 2/20)/sqrt(0.003 * 0.997/6000 + 0.1 * 0.9/200)
(0.003 - 1/20)/sqrt(0.003 * 0.997/6000 + 0.05 * 0.95/200)
# plot the Venndiagram
library(VennDiagram)
#source("/Users/lukez/Documents/barcode_single_end/Rcode/distance_bitwise_util.R")
truth = read.table("../simulation_data/True_barcode_seq.csv",
header = F, sep = ',', stringsAsFactors = F)
cluster <- read.table("../simulation_data/simulated_data_cluster_cluster.csv",
header = TRUE, sep = ',', stringsAsFactors = F)
dim(truth)
dim(cluster)
combined = list()
truth = truth[which(truth$V2 > 2),]
result_cluster = cluster[which(cluster$time_point_1 > 2),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
pdf("comparison_plot.pdf")
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
setwd("~/Documents/barcode_single_end/Rcode")
library(VennDiagram)
truth = read.table("../simulation_data/True_barcode_seq.csv",
header = F, sep = ',', stringsAsFactors = F)
cluster <- read.table("../simulation_data/simulated_data_cluster_cluster.csv",
header = TRUE, sep = ',', stringsAsFactors = F)
dim(truth)
dim(cluster)
combined = list()
truth = truth[which(truth$V2 > 2),]
result_cluster = cluster[which(cluster$time_point_1 > 2),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
#pdf("comparison_plot.pdf")
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
dev.off()
dev.off()
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
dim(truth)
dim(cluster)
combined = list()
truth = truth[which(truth$V2 > 1),]
result_cluster = cluster[which(cluster$time_point_1 > 1),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
#pdf("comparison_plot.pdf")
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
combined = list()
truth = truth[which(truth$V2 > 2),]
result_cluster = cluster[which(cluster$time_point_1 > 2),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
#pdf("comparison_plot.pdf")
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Size of barcodes in log10 scale',
main = "False positive barcodes")
dim(false_positive)
summary(false_positive$time_point_1)
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(missing$V2, col = 'green', xlab = 'Size of barcodes in log10 scale',
main = "False negative barcodes")
dim(missing)
summary(missing$V2)
merged = merge(truth, result_cluster, by.x = "V1", by.y = "Center")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Estimated frequency")
abline(0, 1,col = 'red')
? hist
hist(result_cluster$time_point_1, col = "green", density = T,
xlab = "Barcode size distribution", main = "Histogram of estimated result")
hist(log10(result_cluster$time_point_1), col = "green", density = T,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result")
par(mfrow = c(2,1))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result")
hisg(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth")
par(mfrow = c(1,2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result")
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth")
###############
par(mfrow = c(2,2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result")
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Estimated frequency")
abline(0, 1,col = 'red')
? hist
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 5, 0.2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 4, 0.2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 3.5, 0.2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 3.3, 0.2))
? hist
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 3.3, 0.2), xlim = c(0,4))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0, 3.3, 0.2), xlim = c(0,3.5))
log10(3)
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.3, 0.2), xlim = c(0.4,3.5))
max(truth$V2)
max(result_cluster$time_point_1)
log(1165)
log10(1165)
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.1, 0.2), xlim = c(0.4,3.1))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.1, 0.2), xlim = c(0.4,3.1))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
hist(log10(result_cluster$time_point_1), col = "green", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
? grid
? hist
install.packages("ggplot2")
library(ggplot2)
? ggplot
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), fill = T)
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), border = T)
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), border = T,las=1)
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), prob = TRUE)
hist(log10(truth$V2), col = "red", density = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(result_cluster$time_point_1), col = "green", freq = F,
xlab = "Barcode size distribution in log10 scale", main = "Histogram of estimated result",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
par(mfrow = c(1,1))
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main = "Histogram of truth",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(result_cluster$time_point_1), col = "green", freq = F,
xlab = "Barcode size distribution in log10 scale",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main＝"",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(truth$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main =" ",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(result_cluster$time_point_1), col = "green", freq = F,
xlab = "Barcode size distribution in log10 scale", main = " ",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2))
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Estimated frequency", main = " ")
abline(0, 1,col = 'red')
source('~/Documents/barcode_single_end/Rcode/Vendiagram_plot.R')
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Barcode size',
main = "")
dim(false_positive)
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Barcode size', freq = F,
main = "")
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'red', xlab = 'Barcode size',
main = "")
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(missing$V2, col = 'green', xlab = 'Barcode size',
main = "")
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'green', xlab = 'Barcode size',
main = "")
missing = truth[which(!(truth$V1 %in% result_cluster$Center)),]
hist(missing$V2, col = 'red', xlab = 'Barcode size',
main = "")
belongs = read.csv("../simulation_data/simulated_data_cluster_barcode.csv", header = T)
missing_info = merge(belongs, missing, by.x = "Barcode.Sequence", by.y = "V1")
dim(missing_info)
names(missing_info)
dim(missing_info)
names(cluster)
missing_barcode_belongs = merge(missing_info, cluster, by = "Cluster.ID")[, c("Barcode.Sequence", "V2", "Center",  "time_point_1", "Cluster.Score", "Cluster.ID")]
names(missing_barcode_belongs) = c("Truth", "True.size", "Estimated_sequence", "Estimated_size", "Cluster.Score", "Cluster.ID")
is_in_truth = ifelse(missing_barcode_belongs$Estimated_sequence %in% truth$V1, "yes", "no")
missing_barcode_belongs = cbind(missing_barcode_belongs,is_in_truth)
missing_barcode_belongs = missing_barcode_belongs[order(-missing_barcode_belongs$Estimated_size),]
dim(missing_barcode_belongs)
head(missing_barcode_belongs)
table(is_in_truth)
merge(missing_barcode_belongs, false_negative, by= "Cluster.ID", )
false_negative
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
dim(false_negative)
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'green', xlab = 'Barcode size',
main = "")
dim(false_positive)
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
hist(false_positive$time_point_1, col = 'green', xlab = 'Barcode size',
main = "")
dim(false_positive)
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
dim(false_positive)
cluster <- read.table("../simulation_data/simulated_data_cluster_cluster.csv",
header = TRUE, sep = ',', stringsAsFactors = F)
dim(truth)
dim(cluster)
combined = list()
truth = truth[which(truth$V2 > 2),]
result_cluster = cluster[which(cluster$time_point_1 > 2),]
combined[[1]] = truth$V1
combined[[2]] = result_cluster$Center
#pdf("comparison_plot.pdf")
overlap <- calculate.overlap(combined)
plot.new()
draw.pairwise.venn(length(overlap[[1]]),
length(overlap[[2]]),
length(overlap[[3]]),
scaled = T, label.col = c('green', 'yellow','red'),
fill = c('green','red'),
main = "Venndiagram ")
false_positive = result_cluster[which(!(result_cluster$Center %in% truth$V1)),]
plot.new()
names(false_positive)
merge(missing_barcode_belongs, false_negative, by= "Cluster.ID")
names(missing_barcode_belongs)
names(false_positive)
merge(missing_barcode_belongs, false_positive, by= "Cluster.ID")
overlap_missing_fp = merge(missing_barcode_belongs, false_positive, by= "Cluster.ID")
dim(overlap_missing_fp)
table(is_in_truth)
#source("/Users/lukez/Documents/barcode_single_end/Rcode/distance_bitwise_util.R")
truth = read.table("../simulation_data/True_barcode_seq.csv",
header = F, sep = ',', stringsAsFactors = F)
is_in_truth = ifelse(missing_barcode_belongs$Estimated_sequence %in% truth$V1, "yes", "no")
table(is_in_truth)
missing_barcode_belongs = cbind(missing_barcode_belongs,is_in_truth)
100000 - 97528
setwd("~/Documents/barcode_single_end/Rcode/seqLogo_plot.R")
setwd("~/Documents/barcode_single_end/Rcode")
source ("seqLogo_plot.R")
truth_pwm <- read.csv("../simulation_data/True_pwm.csv", header = F)
truth_pwm
source ("seqLogo_plot.R")
source ("seqLogo_plot.R")
install.packages("seqLogo")
source("https://bioconductor.org/biocLite.R")
biocLite("seqLogo")
source ("seqLogo_plot.R")
plotSeqLogo(truth_pwm)
plotSeqLogo(as.matrix(truth_pwm))
truth_pwm
plotSeqLogo <- function(single_frequency) {
pwm <- apply(single_frequency, 2, proportion)
pwm <- makePWM(pwm)
seqLogo(pwm)
}
plotSeqLogo(as.matrix(truth_pwm))
plotSeqLogo <- function(single_frequency) {
pwm <- apply(single_frequency, 2, proportion)
print(pwm)
pwm <- makePWM(pwm)
seqLogo(pwm)
}
plotSeqLogo(as.matrix(truth_pwm))
? seqLogo
dim(truth_pwm)
is.matrix(truth_pwm)
as.matrix(truth_pwm)
plotSeqLogo <- function(single_frequency) {
pwm <- apply(single_frequency, 2, proportion)
pwm <- makePWM(pwm)
seqLogo(pwm)
}
? plotSeqLogo
? seqLogo
plotSeqLogo <- function(single_frequency,...) {
pwm <- apply(single_frequency, 2, proportion)
pwm <- makePWM(pwm)
seqLogo(pwm,...)
}
plotSeqLogo(as.matrix(truth_pwm), ic.scale = F)
plotSeqLogo(as.matrix(truth_pwm), ic.scale = T)
plotSeqLogo(as.matrix(truth_pwm), ic.scale = F)
simulation_pwm <- read.csv("../simulation_data/Simulated_pwm.csv", header = F)
plotSeqLogo(as.matrix(simulation_pwm), ic.scale = F)
simulation_seq <- read.table("../simuation_data/Simulated_barcode_freq.txt", sep = ',')
setwd("~/Documents/barcode_single_end/Rcode")
simulation_seq <- read.table("../simuation_data/Simulated_barcode_freq.txt", sep = ',')
simulation_seq <- read.table("../simulation_data/Simulated_barcode_freq.txt", sep = ',')
hist(log10(simulation_seq$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main =" ",
breaks = seq(0.4, 3.2, 0.2), xlim = c(0.4,3.2), freq = F)
hist(log10(simulation_seq$V2), col = "red",
xlab = "Barcode size distribution in log10 scale", main =" ",
breaks = seq(0, 3.2, 0.2), xlim = c(0,3.2), freq = F)
hist(log10(simulation_seq$V2), col = "blue",
xlab = "Barcode size distribution in log10 scale", main =" ",
breaks = seq(0, 3.2, 0.2), xlim = c(0,3.2), freq = F)
truth = read.table("../simulation_data/True_barcode_freq.txt",
header = F, sep = ',', stringsAsFactors = F)
merged = merge(truth, simulation_seq, by = "V1")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Sequeced frequency", main = " ")
abline(0, 1,col = 'red')
names(merged)
dim(merged)
names(simulation_seq)
head(simulation_seq)
head(truth)
truth = read.table("../simulation_data/True_barcode_freq.txt",
header = F, sep = '\t', stringsAsFactors = F)
merged = merge(truth, simulation_seq, by = "V1")
plot(merged$V2, merged$time_point_1, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Sequeced frequency", main = " ")
abline(0, 1,col = 'red')
head(truth)
head(simulation_seq)
merged = merge(truth, simulation_seq, by = "V1")
dim(merged)
names(simulation_seq) = c("V1", "freq")
merged = merge(truth, simulation_seq, by = "V1")
plot(merged$V2, merged$freq, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Sequeced frequency", main = " ")
abline(0, 1,col = 'red')
plot(merged$V2, merged$freq, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Sequeced frequency", main = " "
ylim = c(0, 1200))
plot(merged$V2, merged$freq, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Sequeced frequency", main = " ",
ylim = c(0, 1200))
abline(0, 1,col = 'red')
? plot
plot(merged$V2, merged$freq, pch = 20, col = 'blue',
xlab = "True frequency", ylab = "Raw Frequency", main = " ",
ylim = c(0, 1200),)
abline(0, 1,col = 'red')
